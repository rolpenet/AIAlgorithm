Fluent. Acording to according to their own description: Fluent is a comprehensive tool for editing and manipulating complex ontologies that uses Controlled Natural Language. Fluent Editor provides one with a more suitable for human users alternative to XML-based OWL editors. It's main feature is the usage of Controlled English as a knowledge modeling language . Supported via Predictive Editor, it prohibits one from entering any sentence that is grammatically or morphologically incorrect and actively helps the user during sentence writing.[25]

* hardware/software resources
- the supported operating system is only Windows including version 10.
- is available as a downloadable installation file (*.msi); 
- in the case of version 3.6.10.28710, the archive has a size of 64.4 MB
- free licensing for individual, academics or small professional teams.

* interoperability
- compatibil with Protege 5.0; has the option to import or export to Protege;
- can import ontologies from a URL or from a local file. Free edition only allow the import of small ontologies with less than 200 lines of CNL statements.
- can export in format RDF/XML, OWL/RDF, as an attachment to mail or export to Ontorion (a distributed knowledge management system that uses CNL interface)  

* support for graphical visualization
- offers visualizations in two forms with the possibility of exporting as a picture (*.jpg,*.svg).

* support for reasoning
- Reasoning engine : HermiT

* support for queries
- SPARQL

* other facilities
- to extend the expressivity of OWL, this editor appeals to SWRL - Semantic Web Rule Language. 

* usability
Fluent Editor uses Controlled Natural Language to create and model ontologies. The first thing to do before starting an ontology project is to learn and understand the CNL syntax and grammar. 
Naming convention - if we were accustomed to ontologies with CamelCase notation for classes and mixedCase for attributes, in this case all identifiers are separated by dash, the class and property identifiers are written in small letters, individuals are written with the first large letter separated by dash. All axioms appear in document view. The editor corrects you when entering any sentence that is grammatically or morphologically incorrect and helps you with suggestions during sentence writing[27]. On the right side you can see the taxonomy tree, something like the Protege class hierarchy.
- selecting a few statements, you can view their XML form.
 
> creating an ontology
- to complete the namespace, use the keyword 'Namespace :' followed by IRI.
- Instead of prefixes, references are used with the keyword "References" and in statements the element of the other ontology is succeded by the reference prefix.
<<<<<<<<<< name of ontology, comment and annotation.>>>>>>>>>

> creating classes
- to create a class it is used concept subsumption - one concept subsumes the other one if the set described by the first concept is a subset of the other one (Algorithm subclassOf Thing <=> Every algorithm is a thing). 
- to express class equivalency it is used the keyword 'if-and-only-if-it'.
- the disjunction is expressed by negation, keyword "no".
- you can declare into a single expression, disjoint union of several classes with the keyword "if-and-only-if-it-either".

> adding object properties
- the properties of objects, called roles, are also added by a statement. There may be existential role restriction ('Every problem is-resolved-by an algorithm') and universal role restriction ('Every algorithm resolves nothing-but Problem').
- complex expresion
- intersectia
- uniunea
- cardinal restrictions can be expressed using the keyword (less than, more than, at-most, at-least, different-than).
- you can express transitivity, reflexivity ('Every problem has-sub-problem itself.'), irreflexivity (a kind of reflexivity negation), symmetry, role equivalence ('if-and-only-if');  

> adding data properties
- to specify a datatype of data property you can specify into brackets the type of data literal (some value), integer (some integer value), double (some real value) boolean ('Every algorithm is-complete nothing-but (some boolean value)'), string (some string value), date (some datetime value).  
- you can use the following keywords to specify a range of values (greater-than, lower-than,greater-or-equal-to,lower-or-equal-to, different-from, equal-to).

> adding individuals
- to specify individuals (here instances of concepts), a statement is sufficient ('Maze is a problem.'). For individuals, the name begins with a capital letter and without the expression 'every'.

> importing an ontology
- 

> reasoning
- in the reasoner tab, we can fill in which element we are interested in. For example, we are interested in the a-i-algorithm. We write the question in that box 'Who-Or-What is a a-i-algorithm'. The editor simultaneously displays the answer to three variants of questions : <?> is a a-i-algorithm (individuals); every <?> is an a-i-algorithm (sublasses); every algorithm is a <?>(superclasses). 

> querying
- you can query SPARQL using the rdf format, the prefix may be specified for ease of the query. The result can be copied to the clipboard from the resulting table right clicking over the selected rows in the control, this content can be pasted to any spreadsheet software.[26]

> visualization
- there is the possibility of a graphical visualization of classes, but the editor relies heavily on the existence of an R-plugin. Only two view variations are available (hierarchical layout and force directed layout). There are some options on the display data. 
- the visualization can be saved as *.jpg or *.svg.

> others
- plugin for R-project



[25] www.cognitum.eu/
[26] http://docs.cognitum.eu/FluentEditor/
