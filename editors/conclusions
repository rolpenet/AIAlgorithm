> hardware / software requirements
Protege and OWLGrEd are Java-based and can be run on any platform that has JRE (Java Runtime Environment). Larger dimensions and memory requirements in the Protege case  are explained by the addition of reasoning, quering, etc., although at visualizing of large ontologies are more prone to crash. Fluent Editor requires installation on a windows-based system. WebProtege on the other hand does not require installation, just a browser and a e-mail account.

> interoperability
Protege has most of the ontology serialization formats for export import (Turtle, OBO, LaTeX, Jason-LD) and the procedure seems simpler. Graphical visualizations can be saved as images in Protege and OWLGrEd with a plus for the latter having the possibility to save in SVG format. Fluent Editor has fewer options for import / export of ontologies, has a specialized plug-in for importing / exporting ontologies to and from Protege, and has a R language plugin. 

> support for graphical visualization
At this caracteristic, OWLGrEd wins detached due to the extensive customization capabilities of graphics. Some prefer to build the ontology in Protege and visualize it in OWLGrEd. Protege and Webprotege have a less demanding graphics visualization. Protege compensates through a plugin that actually handles the graphics. Fluent Editor also has a poor graphics visualization of ontology, but it counts on a plug-in that connects to the R-project.

> support for reasoning 
Of the applications studied, Protege and to a certain extent Fluent Editor have this feature, with an implicit reasoner (HermiT) and the possibility to install other reasoners. Protege verifies the consistency of ontology, explains the inconsistencies found, and makes inferences based on existing data. A condition is that the reasoner is started and synchronized periodically. Fluent Editor verifies and explain the inconsistencies only if you make a query.    

> suport for queries
Protege offers the possibility of making queries (DL and SPARQL queries). In Fluent Editor you can make queries in SPARQL. Queries can be saved and loaded later.

> usability
The editors studied were designed for different purposes, address different user categories and have different characteristics. Some address beginners and emphasize the graphical side and ease of creating and modifying simple ontologies. Others address specialists, are built for more complex ontologies, have more facilities and have a wider range of applications.
For beginners and those who are familiar with UML diagrams and object-oriented programming that intends to make a simple ontology, OWLGrEd is the most appropriate editor. It is based on graphical diagrams in UML style, classes, object and data properties, individuals and class relationships are built through graphical elements. The emphasis on the graphic is also reflected in the view mode. In it you can set the colors, the font, the shapes, the spatial layout. An ontology can be created in Protege and imported into OWLGrEd to get a great visualization, especially for large ontologies. The resulting graph can then be saved in several formats including SVG for web pages.
For ontologies worked in team the ideal editor is webprotege. This, besides taking over many of the Protege facilities, has the advantage that ontology can be accessed online. It means that you can modify the ontology from many places, shared with other in the github style with rights set for each user.
For specialists, Protege is the application of choice. Creating class hierarchy, especially using indentation, one class per row, is very simple and requires no specialized knowledge. As we move forward, more knowledge is needed, but the modeling possibilities grow. Firstly, it has a reasoner and can detect the inconsistencies in ontology. Secondly, inherited inferences can be integrated into ontology. Finally, interrogations can be made in DL and SPARQL. Protege can also be used to convert ontologies from one format to another, with a wider range of import / export options. with backing a community that supports it, has the advantage of a large number of plugins that makes it more versatile. OWLGrEd also has a number of plugins, but it does not compare.

